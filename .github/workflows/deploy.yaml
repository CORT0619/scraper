name: deploy-to-aws
run-name: ${{ github.actor }}
on:
  push:
    branches:
      - main
jobs:
  lambda-deployment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        id: step1
        uses: actions/checkout@v4
      - name: Node setup
        id: step2
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Deploy to AWS
        id: step3
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::816698261168:role/github_actions
          aws-region: us-east-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - run: zip -r lambda.zip lambda
      - run: aws lambda update-function-code --function-name=scraper --zip-file=fileb://lambda.zip
      - run: cd lambda/ && npm install
      - run: cd lambda/ && zip -r layer.zip node_modules
      - run: cd lambda/ && aws lambda publish-layer-version --layer-name deps --zip-file fileb://layer.zip --compatible-runtimes nodejs20.x --region us-east-2
      # - run: echo "LAMBDA_LAYER=$(aws lambda list-layer-versions --layer-name deps --output text)" >> $GITHUB_OUTPUT
      # - run: echo "::set-output name=lambda_layer::$(aws lambda list-layers --output=text)"
      # - run: echo "LAMBDA_LAYER=$(aws lambda list-layer-versions --layer-name deps --output text --query 'LayerVersions[0].LayerVersionArn')" >> $GITHUB_OUTPUT
      - run: echo "LAMBDA_LAYER=$(aws lambda list-layer-versions --layer-name deps --query 'max_by(LayerVersions, &Version).LayerVersionArn' --output=text)" >> $GITHUB_OUTPUT
      - run: echo "${{ steps.step3.outputs.LAMBDA_LAYER }}"
      - run: aws lambda update-function-configuration --function-name=scraper --layers ${{ steps.step3.outputs.LAMBDA_LAYER }}
